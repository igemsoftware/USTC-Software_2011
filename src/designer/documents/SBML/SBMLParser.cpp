// THIS FILE IS AUTO-GENERATED BY PARSERCOMP.
// PLEASE DON'T EDIT THIS FILE MANUALLY.
// Generate Time: Wed Aug 03 00:11:03 2011


#include "SBMLParser.h"

bool SBMLParser::parse(DesignerModelComponent* model, QDomDocument& doc)
{
	QList<parseTask> taskList;
	taskList.push_back(parseTask(QDomElement(), model->getEngine()->globalObject(), 0));
	size_t curTask = 0;
	while(curTask<(size_t)taskList.size())
	{
		switch(taskList[curTask].taskHint)
		{
		case 0:   //
			{
				//defaultAction
				//standardObject
				QDomDocument curElem = doc;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="sbml")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 1));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
			}
			break;
		case 1:   //#object$standardObject~/model/*sbml*
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="xmlns")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 2));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="metaid")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 3));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="level")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 4));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="version")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 5));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="model")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 6));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*");
			}
			break;
		case 2:   //#value$getProperty(xmlns)~/model/*sbml*/xmlns
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("xmlns"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/xmlns");
			}
			break;
		case 3:   //#value$getProperty(metaid)~/model/*sbml*/metaid
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("metaid"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/metaid");
			}
			break;
		case 4:   //#value$getProperty(level)~/model/*sbml*/level
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("level"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/level");
			}
			break;
		case 5:   //#value$getProperty(version)~/model/*sbml*/version
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("version"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/version");
			}
			break;
		case 6:   //#object$markAsModel$standardObject~/model
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 7));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 8));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="substanceUnits")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 9));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="timeUnits")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 10));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="volumeUnits")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 11));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="areaUnits")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 12));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="lengthUnits")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 13));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="extentUnits")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 14));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="conversionFactor")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 15));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="notes")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 16));
					}
					else if(childElem.nodeName()=="annotation")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 17));
					}
					else if(childElem.nodeName()=="listOfFunctionDefinitions")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 18));
					}
					else if(childElem.nodeName()=="listOfUnitDefinitions")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 22));
					}
					else if(childElem.nodeName()=="listOfCompartments")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 31));
					}
					else if(childElem.nodeName()=="listOfSpecies")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 39));
					}
					else if(childElem.nodeName()=="listOfParameters")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 52));
					}
					else if(childElem.nodeName()=="listOfInitialAssignment")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 60));
					}
					else if(childElem.nodeName()=="listOfRules")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 65));
					}
					else if(childElem.nodeName()=="listOfConstraints")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 77));
					}
					else if(childElem.nodeName()=="listOfReactions")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 81));
					}
					else if(childElem.nodeName()=="listOfEvents")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 122));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model");
			}
			break;
		case 7:   //#value$getProperty(id)~/model/*sbml*/model_id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_id");
			}
			break;
		case 8:   //#value$getProperty(name)~/model/*sbml*/model_name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_name");
			}
			break;
		case 9:   //#value$getProperty(substanceUnits)~/model/*sbml*/model_unit_substance
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("substanceUnits"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_unit_substance");
			}
			break;
		case 10:   //#value$getProperty(timeUnits)~/model/*sbml*/model_unit_time
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("timeUnits"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_unit_time");
			}
			break;
		case 11:   //#value$getProperty(volumeUnits)~/model/*sbml*/model_unit_volume
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("volumeUnits"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_unit_volume");
			}
			break;
		case 12:   //#value$getProperty(areaUnits)~/model/*sbml*/model_unit_area
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("areaUnits"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_unit_area");
			}
			break;
		case 13:   //#value$getProperty(lengthUnits)~/model/*sbml*/model_unit_length
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("lengthUnits"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_unit_length");
			}
			break;
		case 14:   //#value$getProperty(extentUnits)~/model/*sbml*/model_unit_extent
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("extentUnits"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_unit_extent");
			}
			break;
		case 15:   //#value$getProperty(conversionFactor)~/model/*sbml*/model_conversion_factor
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("conversionFactor"));
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_conversion_factor");
			}
			break;
		case 16:   //#value$collectChildrenTreesAsString~/model/*sbml*/model_notes
			{
				//collectChildrenTreesAsString
				QScriptValue newItemValue;
				QString      alltext;
				{
					for(QDomElement childElem = taskList[curTask].taskElem.firstChildElement();
						!childElem.isNull(); childElem = childElem.nextSiblingElement())
					{
						QString text;
						QTextStream textStream(&text);
						childElem.save(textStream, 0);
						alltext+=text;
					}
					newItemValue = QScriptValue(alltext);
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_notes");
			}
			break;
		case 17:   //#value$collectChildrenTreesAsString~/model/*sbml*/model_annotation
			{
				//collectChildrenTreesAsString
				QScriptValue newItemValue;
				QString      alltext;
				{
					for(QDomElement childElem = taskList[curTask].taskElem.firstChildElement();
						!childElem.isNull(); childElem = childElem.nextSiblingElement())
					{
						QString text;
						QTextStream textStream(&text);
						childElem.save(textStream, 0);
						alltext+=text;
					}
					newItemValue = QScriptValue(alltext);
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/*sbml*/model_annotation");
			}
			break;
		case 18:   //#array$createArray~/model/functions
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="functionDefinition")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 19));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/functions");
			}
			break;
		case 19:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 20));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 21));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 20:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 21:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 22:   //#array$createArray~/model/units
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="unitDefinition")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 23));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/units");
			}
			break;
		case 23:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 24));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="listOfUnits")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 25));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 24:   //#value$getProperty(id)^id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "id");
			}
			break;
		case 25:   //#array$createArray^/unitlist
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="unit")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 26));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/unitlist");
			}
			break;
		case 26:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="kind")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 27));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="exponent")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 28));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="scale")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 29));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="multiplier")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 30));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 27:   //#value$getProperty(kind)^/kind
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("kind"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/kind");
			}
			break;
		case 28:   //#value$getProperty(exponent)^/exponent
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("exponent"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/exponent");
			}
			break;
		case 29:   //#value$getProperty(scale)^/scale
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("scale"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/scale");
			}
			break;
		case 30:   //#value$getProperty(multiplier)^/multiplier
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("multiplier"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/multiplier");
			}
			break;
		case 31:   //#array$createArray~/model/compartments
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="compartment")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 32));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/compartments");
			}
			break;
		case 32:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 33));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 34));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="spatialDimensions")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 35));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="size")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 36));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="units")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 37));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="constant")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 38));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 33:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 34:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 35:   //#value$getProperty(spatialDimensions)^/spatialDimensions
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("spatialDimensions"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/spatialDimensions");
			}
			break;
		case 36:   //#value$getProperty(size)^/size
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("size"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/size");
			}
			break;
		case 37:   //#value$getProperty(units)^/units
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("units"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/units");
			}
			break;
		case 38:   //#value$getProperty(constant)^/constant
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("constant"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/constant");
			}
			break;
		case 39:   //#array$createArray~/model/species
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="species")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 40));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/species");
			}
			break;
		case 40:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 41));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 42));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="compartment")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 43));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="initialAmount")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 44));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="initialConcentration")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 45));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="substanceUnits")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 46));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="hasOnlySubstanceUnits")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 47));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="boundaryCondition")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 48));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="constant")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 49));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="conversionFactor")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 50));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="annotation")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 51));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 41:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 42:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 43:   //#value$getProperty(compartment)^/compartment
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("compartment"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/compartment");
			}
			break;
		case 44:   //#value$getProperty(initialAmount)^/initialAmount
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("initialAmount"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/initialAmount");
			}
			break;
		case 45:   //#value$getProperty(initialConcentration)^/initialConcentration
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("initialConcentration"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/initialConcentration");
			}
			break;
		case 46:   //#value$getProperty(substanceUnits)^/substanceUnits
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("substanceUnits"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/substanceUnits");
			}
			break;
		case 47:   //#value$getProperty(initialAmount)^/hasOnlySubstanceUnits
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("initialAmount"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/hasOnlySubstanceUnits");
			}
			break;
		case 48:   //#value$getProperty(boundaryCondition)^/boundaryCondition
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("boundaryCondition"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/boundaryCondition");
			}
			break;
		case 49:   //#value$getProperty(constant)^/constant
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("constant"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/constant");
			}
			break;
		case 50:   //#value$getProperty(conversionFactor)^/conversionFactor
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("conversionFactor"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/conversionFactor");
			}
			break;
		case 51:   //#value$collectChildrenTreeAsString^/*sbml*/species_annotation
			{
				//collectChildrenTreesAsString
				QScriptValue newItemValue;
				QString      alltext;
				{
					for(QDomElement childElem = taskList[curTask].taskElem.firstChildElement();
						!childElem.isNull(); childElem = childElem.nextSiblingElement())
					{
						QString text;
						QTextStream textStream(&text);
						childElem.save(textStream, 0);
						alltext+=text;
					}
					newItemValue = QScriptValue(alltext);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/*sbml*/species_annotation");
			}
			break;
		case 52:   //#array$createArray~/model/parameters
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="parameter")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 53));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/parameters");
			}
			break;
		case 53:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 54));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 55));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="value")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 56));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="units")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 57));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="constant")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 58));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="sboTerm")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 59));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 54:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 55:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 56:   //#value$getProperty(value)^/value
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("value"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/value");
			}
			break;
		case 57:   //#value$getProperty(units)^/units
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("units"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/units");
			}
			break;
		case 58:   //#value$getProperty(constant)^/constant
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("constant"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/constant");
			}
			break;
		case 59:   //#value$getProperty(sboTerm)^/sboTerm
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("sboTerm"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/sboTerm");
			}
			break;
		case 60:   //#array$createArray~/model/initialAssignments
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="initialAssignment")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 61));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/initialAssignments");
			}
			break;
		case 61:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="symbol")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 62));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="sboTerm")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 64));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 63));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 62:   //#value$getProperty(symbol)^/symbol
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("symbol"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/symbol");
			}
			break;
		case 63:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 64:   //#value$getProperty(sboTerm)^/sboTerm
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("sboTerm"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/sboTerm");
			}
			break;
		case 65:   //#array$createArray~/model/rules
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="algebraicRule")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 66));
					}
					else if(childElem.nodeName()=="assignmentRule")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 69));
					}
					else if(childElem.nodeName()=="rateRule")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 73));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/rules");
			}
			break;
		case 66:   //#object$standardObject$withProperty(type,algebraic)$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="sboTerm")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 68));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 67));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				newItemValue.setProperty("type", "algebraic");
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 67:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 68:   //#value$getProperty(sboTerm)^/sboTerm
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("sboTerm"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/sboTerm");
			}
			break;
		case 69:   //#object$standardObject$withProperty(type,assignment)$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="variable")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 70));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="sboTerm")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 72));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 71));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				newItemValue.setProperty("type", "assignment");
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 70:   //#value$getProperty(variable)^/variable
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("variable"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/variable");
			}
			break;
		case 71:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 72:   //#value$getProperty(sboTerm)^/sboTerm
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("sboTerm"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/sboTerm");
			}
			break;
		case 73:   //#object$standardObject$withProperty(type,rate)$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="variable")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 74));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="sboTerm")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 76));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 75));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				newItemValue.setProperty("type", "rate");
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 74:   //#value$getProperty(variable)^/variable
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("variable"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/variable");
			}
			break;
		case 75:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 76:   //#value$getProperty(sboTerm)^/sboTerm
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("sboTerm"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/sboTerm");
			}
			break;
		case 77:   //#array$createArray~/model/constraints
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="constraint")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 78));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/constraints");
			}
			break;
		case 78:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 79));
					}
					else if(childElem.nodeName()=="message")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 80));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 79:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 80:   //#value$collectChildrenTreeAsString^/message
			{
				//collectChildrenTreesAsString
				QScriptValue newItemValue;
				QString      alltext;
				{
					for(QDomElement childElem = taskList[curTask].taskElem.firstChildElement();
						!childElem.isNull(); childElem = childElem.nextSiblingElement())
					{
						QString text;
						QTextStream textStream(&text);
						childElem.save(textStream, 0);
						alltext+=text;
					}
					newItemValue = QScriptValue(alltext);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/message");
			}
			break;
		case 81:   //#array$createArray~/model/reactions
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="reaction")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 82));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/reactions");
			}
			break;
		case 82:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 83));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 84));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="reversible")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 85));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="fast")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 86));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="compartment")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 87));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="annotation")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 88));
					}
					else if(childElem.nodeName()=="listOfReactants")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 89));
					}
					else if(childElem.nodeName()=="listOfProducts")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 96));
					}
					else if(childElem.nodeName()=="listOfModifiers")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 103));
					}
					else if(childElem.nodeName()=="kineticLaw")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 108));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 83:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 84:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 85:   //#value$getProperty(reversible)^/reversible
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("reversible"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/reversible");
			}
			break;
		case 86:   //#value$getProperty(fast)^/fast
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("fast"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/fast");
			}
			break;
		case 87:   //#value$getProperty(compartment)^/compartment
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("compartment"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/compartment");
			}
			break;
		case 88:   //#value$collectChildrenTreeAsString^/*sbml*/annotation
			{
				//collectChildrenTreesAsString
				QScriptValue newItemValue;
				QString      alltext;
				{
					for(QDomElement childElem = taskList[curTask].taskElem.firstChildElement();
						!childElem.isNull(); childElem = childElem.nextSiblingElement())
					{
						QString text;
						QTextStream textStream(&text);
						childElem.save(textStream, 0);
						alltext+=text;
					}
					newItemValue = QScriptValue(alltext);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/*sbml*/annotation");
			}
			break;
		case 89:   //#array$createArray^/reactants
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="speciesReference")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 90));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/reactants");
			}
			break;
		case 90:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 91));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 92));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="species")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 93));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="stoichiometry")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 94));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="constant")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 95));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 91:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 92:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 93:   //#value$getProperty(species)^/species
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("species"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/species");
			}
			break;
		case 94:   //#value$getProperty(stoichiometry)^/stoichiometry
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("stoichiometry"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/stoichiometry");
			}
			break;
		case 95:   //#value$getProperty(constant)^/constant
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("constant"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/constant");
			}
			break;
		case 96:   //#array$createArray^/products
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="speciesReference")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 97));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/products");
			}
			break;
		case 97:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 98));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 99));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="species")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 100));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="stoichiometry")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 101));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="constant")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 102));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 98:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 99:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 100:   //#value$getProperty(species)^/species
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("species"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/species");
			}
			break;
		case 101:   //#value$getProperty(stoichiometry)^/stoichiometry
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("stoichiometry"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/stoichiometry");
			}
			break;
		case 102:   //#value$getProperty(constant)^/constant
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("constant"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/constant");
			}
			break;
		case 103:   //#array$createArray^/modifiers
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="modifierSpeciesReference")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 104));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/modifiers");
			}
			break;
		case 104:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 105));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 106));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="species")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 107));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 105:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 106:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 107:   //#value$getProperty(species)^/species
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("species"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/species");
			}
			break;
		case 108:   //#object$standardObject^/kineticLaw
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 109));
					}
					else if(childElem.nodeName()=="listOfParameters")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 110));
					}
					else if(childElem.nodeName()=="listOfLocalParameters")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 116));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/kineticLaw");
			}
			break;
		case 109:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 110:   //#array$createArray^/localparameters
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="parameter")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 111));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/localparameters");
			}
			break;
		case 111:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 112));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 113));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="value")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 114));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="units")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 115));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 112:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 113:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 114:   //#value$getProperty(value)^/value
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("value"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/value");
			}
			break;
		case 115:   //#value$getProperty(units)^/units
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("units"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/units");
			}
			break;
		case 116:   //#array$createArray^/localparameters
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="localParameter")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 117));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/localparameters");
			}
			break;
		case 117:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 118));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 119));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="value")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 120));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="units")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 121));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 118:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 119:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 120:   //#value$getProperty(value)^/value
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("value"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/value");
			}
			break;
		case 121:   //#value$getProperty(units)^/units
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("units"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/units");
			}
			break;
		case 122:   //#array$createArray~/model/events
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="event")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 123));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = model->getEngine()->globalObject();
				writeValueToModel(newItemValue, curTargetItem, "/model/events");
			}
			break;
		case 123:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="id")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 124));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="name")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 125));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="useValuesFromTriggerTime")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 126));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="trigger")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 127));
					}
					else if(childElem.nodeName()=="priority")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 131));
					}
					else if(childElem.nodeName()=="delay")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 133));
					}
					else if(childElem.nodeName()=="listOfEventAssignments")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 135));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 124:   //#value$getProperty(id)^/id
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("id"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/id");
			}
			break;
		case 125:   //#value$getProperty(name)^/name
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("name"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/name");
			}
			break;
		case 126:   //#value$getProperty(useValuesFromTriggerTime)^/useValuesFromTriggerTime
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("useValuesFromTriggerTime"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/useValuesFromTriggerTime");
			}
			break;
		case 127:   //#object$standardObject^/trigger
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="initialValue")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 128));
					}
					else if(curElem.attributes().item(attrIndex).nodeName()=="persistent")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 129));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 130));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/trigger");
			}
			break;
		case 128:   //#value$getProperty(initialValue)^/initialValue
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("initialValue"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/initialValue");
			}
			break;
		case 129:   //#value$getProperty(persistent)^/persistent
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("persistent"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/persistent");
			}
			break;
		case 130:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 131:   //#object$standardObject^/priority
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 132));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/priority");
			}
			break;
		case 132:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 133:   //#object$standardObject^/delay
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 134));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/delay");
			}
			break;
		case 134:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		case 135:   //#array$createArray^/eventAssignments
			{
				//createArray
				QScriptValue newItemValue;
				newItemValue = model->getEngine()->newArray(0);
				QDomElement curElem = taskList[curTask].taskElem;
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="eventAssignment")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 136));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/eventAssignments");
			}
			break;
		case 136:   //#object$standardObject$appendToArray^
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					if(curElem.attributes().item(attrIndex).nodeName()=="variable")
					{
						taskList.push_back(parseTask(curElem, newItemValue, 137));
					}
					else
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					if(childElem.nodeName()=="math")
					{
						taskList.push_back(parseTask(childElem, newItemValue, 138));
					}
					else
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "");
			}
			break;
		case 137:   //#value$getProperty(variable)^/variable
			{
				//getProperty
				QScriptValue newItemValue;
				newItemValue = QScriptValue(taskList[curTask].taskElem.attribute("variable"));
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/variable");
			}
			break;
		case 138:   //#value$collectTreeAsString^/math
			{
				//collectTreeAsString
				QScriptValue newItemValue;
				{
					QString text;
					QTextStream textStream(&text);
					taskList[curTask].taskElem.save(textStream, 0);
					newItemValue = QScriptValue(text);
				}
				QScriptValue curTargetItem = taskList[curTask].taskParent;
				writeValueToModel(newItemValue, curTargetItem, "/math");
			}
			break;
		default:
			{
				//standardObject
				QDomElement curElem = taskList[curTask].taskElem;
				//create object.
				QScriptValue newItemValue = model->getEngine()->newObject();

				newItemValue.setProperty("*tag*", curElem.nodeName());
				//[append this Item To *subobjects*]
				appendValueToModel(newItemValue, taskList[curTask].taskParent, "/*subobjects*");

				//[write properties]
				for(int attrIndex = 0 ; attrIndex < curElem.attributes().count(); attrIndex++)
				{
					{
						newItemValue.setProperty(  curElem.attributes().item(attrIndex).nodeName(), curElem.attributes().item(attrIndex).nodeValue());
					}
				}
				//[write children objects]
				for(QDomElement childElem = curElem.firstChildElement();
					!childElem.isNull(); childElem = childElem.nextSiblingElement())
				{
					{
						taskList.push_back(parseTask(childElem, newItemValue, (size_t)-1));
					}
				}
			}
			break;
		};
		curTask++;
	}
	return true;
}
