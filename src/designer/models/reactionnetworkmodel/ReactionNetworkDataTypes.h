// THIS FILE IS AUTO-GENERATED BY PROTOCOMP.
// PLEASE DON'T EDIT THIS FILE MANUALLY.
// Generate Time: Tue Jul 05 23:34:12 2011

#ifndef REACTIONNETWORKDATATYPES_H
#define REACTIONNETWORKDATATYPES_H

#include <QMetaType>
#include <QScriptValue>
#include <QVariant>

#include "models/common/ModelSymbol.h"

namespace ReactionNetworkDataTypes
{
// Now generate IDs for types. 
// Note this ID is unique in model-wide. Do not use it globally.
	enum typeIDs
	{
		typesymbolID = QVariant::UserType+0,
		typesymbollistID = QVariant::UserType+1,
		typevaluelistID = QVariant::UserType+2,
		typemathexprID = QVariant::UserType+3,
		typemathsegexprID = QVariant::UserType+4,
		typepredicateID = QVariant::UserType+5,
		typeprecisevalueID = QVariant::UserType+6,
		classReactionID = QVariant::UserType+7,
		classCompartmentID = QVariant::UserType+8,
		classSpeciesID = QVariant::UserType+9,
		classChainID = QVariant::UserType+10,
		classPartID = QVariant::UserType+11,
		classParameterID = QVariant::UserType+12,
		classUnitID = QVariant::UserType+13,
		classUnknownID
	};


	using lachesis::symbol_t;
	using lachesis::symbollist_t;
	using lachesis::valuelist_t;
	using lachesis::mathexpr_t;
	using lachesis::mathsegexpr_t;
	using lachesis::predicate_t;
	using lachesis::precisevalue_t;



	struct Reaction
	{
		symbol_t name;
		predicate_t reversible;
		symbollist_t reactants;
		symbollist_t modifiers;
		symbollist_t products;
		mathexpr_t kineticLaw;

		static QScriptValue toScriptValue(QScriptEngine *engine,   const Reaction &s)
		{
			QScriptValue obj = engine->newObject();
			obj.setProperty("name", convertModelTypeToScriptValue(engine, s.name));
			obj.setProperty("reversible", convertModelTypeToScriptValue(engine, s.reversible));
			obj.setProperty("reactants", convertModelTypeToScriptValue(engine, s.reactants));
			obj.setProperty("modifiers", convertModelTypeToScriptValue(engine, s.modifiers));
			obj.setProperty("products", convertModelTypeToScriptValue(engine, s.products));
			obj.setProperty("kineticLaw", convertModelTypeToScriptValue(engine, s.kineticLaw));
			return obj;
		}

		static void fromScriptValue(const QScriptValue &obj, Reaction &s)
		{
			s.name = qscriptvalue_cast<symbol_t>(obj.property("name"));
			s.reversible = qscriptvalue_cast<predicate_t>(obj.property("reversible"));
			s.reactants = qscriptvalue_cast<symbollist_t>(obj.property("reactants"));
			s.modifiers = qscriptvalue_cast<symbollist_t>(obj.property("modifiers"));
			s.products = qscriptvalue_cast<symbollist_t>(obj.property("products"));
			s.kineticLaw = qscriptvalue_cast<mathexpr_t>(obj.property("kineticLaw"));
		}
		inline static const QList<PropertyDescriptor> listProperty()
		{
			QList<PropertyDescriptor> propertyList;
			propertyList.push_back( PropertyDescriptor( "name" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "reversible" , (QVariant::Type)typepredicateID ) );
			propertyList.push_back( PropertyDescriptor( "reactants" , (QVariant::Type)typesymbollistID ) );
			propertyList.push_back( PropertyDescriptor( "modifiers" , (QVariant::Type)typesymbollistID ) );
			propertyList.push_back( PropertyDescriptor( "products" , (QVariant::Type)typesymbollistID ) );
			propertyList.push_back( PropertyDescriptor( "kineticLaw" , (QVariant::Type)typemathexprID ) );
			return propertyList;
		}
	};





	struct Compartment
	{
		// symbol_t name; ;; instance-value
		// precisevalue_t size; ;; instance-value
		// valuelist_t contains; ;; instance-value
                // presicevalue_t initialAmount; ;;
		static QScriptValue toScriptValue(QScriptEngine *engine,   const Compartment &s)
		{
			QScriptValue obj = engine->newObject();
			return obj;
		}

		static void fromScriptValue(const QScriptValue &obj, Compartment &s)
		{
		}
		inline static const QList<PropertyDescriptor> listProperty()
		{
			QList<PropertyDescriptor> propertyList;
			propertyList.push_back( PropertyDescriptor( "name" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "size" , (QVariant::Type)typeprecisevalueID ) );
			propertyList.push_back( PropertyDescriptor( "contains" , (QVariant::Type)typevaluelistID ) );
			return propertyList;
		}
	};





	struct Species
	{
		symbol_t name;
		// symbol_t compartment; ;; instance-value
		// precisevalue_t initialamount; ;; instance-value
		// valuelist_t structure; ;; instance-value

		static QScriptValue toScriptValue(QScriptEngine *engine,   const Species &s)
		{
			QScriptValue obj = engine->newObject();
			obj.setProperty("name", convertModelTypeToScriptValue(engine, s.name));
			return obj;
		}

		static void fromScriptValue(const QScriptValue &obj, Species &s)
		{
			s.name = qscriptvalue_cast<symbol_t>(obj.property("name"));
		}
		inline static const QList<PropertyDescriptor> listProperty()
		{
			QList<PropertyDescriptor> propertyList;
			propertyList.push_back( PropertyDescriptor( "name" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "compartment" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "initialamount" , (QVariant::Type)typeprecisevalueID ) );
			propertyList.push_back( PropertyDescriptor( "structure" , (QVariant::Type)typevaluelistID ) );
			return propertyList;
		}
	};





	struct Chain
	{
		// symbol_t name; ;; instance-value
		// symbol_t type; ;; instance-value
		// valuelist_t structure; ;; instance-value

		static QScriptValue toScriptValue(QScriptEngine *engine,   const Chain &s)
		{
			QScriptValue obj = engine->newObject();
			return obj;
		}

		static void fromScriptValue(const QScriptValue &obj, Chain &s)
		{
		}
		inline static const QList<PropertyDescriptor> listProperty()
		{
			QList<PropertyDescriptor> propertyList;
			propertyList.push_back( PropertyDescriptor( "name" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "type" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "structure" , (QVariant::Type)typevaluelistID ) );
			return propertyList;
		}
	};





	struct Part
	{
		symbol_t name;
		symbol_t type;
		valuelist_t structure;

		static QScriptValue toScriptValue(QScriptEngine *engine,   const Part &s)
		{
			QScriptValue obj = engine->newObject();
			obj.setProperty("name", convertModelTypeToScriptValue(engine, s.name));
			obj.setProperty("type", convertModelTypeToScriptValue(engine, s.type));
			obj.setProperty("structure", convertModelTypeToScriptValue(engine, s.structure));
			return obj;
		}

		static void fromScriptValue(const QScriptValue &obj, Part &s)
		{
			s.name = qscriptvalue_cast<symbol_t>(obj.property("name"));
			s.type = qscriptvalue_cast<symbol_t>(obj.property("type"));
			s.structure = qscriptvalue_cast<valuelist_t>(obj.property("structure"));
		}
		inline static const QList<PropertyDescriptor> listProperty()
		{
			QList<PropertyDescriptor> propertyList;
			propertyList.push_back( PropertyDescriptor( "name" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "type" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "structure" , (QVariant::Type)typevaluelistID ) );
			return propertyList;
		}
	};





	struct Parameter
	{
		symbol_t id;
		symbol_t unit;
		mathsegexpr_t rule;

		static QScriptValue toScriptValue(QScriptEngine *engine,   const Parameter &s)
		{
			QScriptValue obj = engine->newObject();
			obj.setProperty("id", convertModelTypeToScriptValue(engine, s.id));
			obj.setProperty("unit", convertModelTypeToScriptValue(engine, s.unit));
			obj.setProperty("rule", convertModelTypeToScriptValue(engine, s.rule));
			return obj;
		}

		static void fromScriptValue(const QScriptValue &obj, Parameter &s)
		{
			s.id = qscriptvalue_cast<symbol_t>(obj.property("id"));
			s.unit = qscriptvalue_cast<symbol_t>(obj.property("unit"));
			s.rule = qscriptvalue_cast<mathsegexpr_t>(obj.property("rule"));
		}
		inline static const QList<PropertyDescriptor> listProperty()
		{
			QList<PropertyDescriptor> propertyList;
			propertyList.push_back( PropertyDescriptor( "id" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "unit" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "rule" , (QVariant::Type)typemathsegexprID ) );
			return propertyList;
		}
	};





	struct Unit
	{
		symbol_t name;
		valuelist_t ratio;

		static QScriptValue toScriptValue(QScriptEngine *engine,   const Unit &s)
		{
			QScriptValue obj = engine->newObject();
			obj.setProperty("name", convertModelTypeToScriptValue(engine, s.name));
			obj.setProperty("ratio", convertModelTypeToScriptValue(engine, s.ratio));
			return obj;
		}

		static void fromScriptValue(const QScriptValue &obj, Unit &s)
		{
			s.name = qscriptvalue_cast<symbol_t>(obj.property("name"));
			s.ratio = qscriptvalue_cast<valuelist_t>(obj.property("ratio"));
		}
		inline static const QList<PropertyDescriptor> listProperty()
		{
			QList<PropertyDescriptor> propertyList;
			propertyList.push_back( PropertyDescriptor( "name" , (QVariant::Type)typesymbolID ) );
			propertyList.push_back( PropertyDescriptor( "ratio" , (QVariant::Type)typevaluelistID ) );
			return propertyList;
		}
	};
















}
Q_DECLARE_METATYPE(ReactionNetworkDataTypes::Reaction)
Q_DECLARE_METATYPE(ReactionNetworkDataTypes::Compartment)
Q_DECLARE_METATYPE(ReactionNetworkDataTypes::Species)
Q_DECLARE_METATYPE(ReactionNetworkDataTypes::Chain)
Q_DECLARE_METATYPE(ReactionNetworkDataTypes::Part)
Q_DECLARE_METATYPE(ReactionNetworkDataTypes::Parameter)
Q_DECLARE_METATYPE(ReactionNetworkDataTypes::Unit)

#endif // REACTIONNETWORKDATATYPES_H
